import type { Vulnerability } from '@/type';
import {
  exportHandler,
  selectedRecordForExport,
} from '@/utils/exportToCSVFile';
import { Checkbox, Table, Text, Container, Box } from '@mantine/core';
import Link from 'next/link';
import { useRouter } from 'next/router';
import React, { useState } from 'react';
import { useEffect } from 'react';
import styles from './VulnerabilityDetails.module.css';
import { tableHeaderWithIcon } from '@/utils/iconHelper';
type VulnerabilityListProps = {
  vulnerabilities: Vulnerability[];
};

const onClickHandler = (vulnerability: Vulnerability) => {
  const queryString = new URLSearchParams(vulnerability).toString();

  window.location.href = `/vulnerability?${queryString}`;
};
const VulnerabilityList: React.FC<VulnerabilityListProps> = ({
  vulnerabilities,
}) => {
  const [vulnerabilityList, setVulnerabilityList] =
    useState<Vulnerability[]>(vulnerabilities);
  const [checked, setChecked] = useState<string[]>([]);
  const router = useRouter();
  const { query } = router;
  const sortKey = query.sort as keyof Vulnerability;

  useEffect(() => {
    if (sortKey) {
      sortVulnerabilities(sortKey);
    }
  }, [sortKey]);
  const sortVulnerabilities = (key: keyof Vulnerability) => {
    const sortedVulnerabilities = [...vulnerabilityList].sort((a, b) => {
      if (a[key] < b[key]) return -1;
      if (a[key] > b[key]) return 1;
      return 0;
    });
    setVulnerabilityList(sortedVulnerabilities);
  };

  const handleSort = (key: keyof Vulnerability) => {
    router.push({
      query: { ...query, sort: key },
    });
  };
  const toggleCheckBoxHandler = (oid: string) => {
    if (checked.includes(oid)) {
      setChecked(checked.filter((item) => item !== oid));
    } else {
      setChecked([...checked, oid]);
    }
  };

  return (
    <div>
      <div className={styles.title}>
        <Container fluid h={40} pt={5} bg="var(--mantine-color-blue-light)">
          Vulnerabilities
        </Container>
      </div>
      <div className={styles.exportBtn}>
        <button
          onClick={() =>
            exportHandler(
              selectedRecordForExport(vulnerabilityList, checked),
              'Vulnerabilities'
            )
          }
        >
          Export to CSV
        </button>
      </div>
      <Table>
        <Table.Thead>
          <Table.Tr>
            <Table.Th></Table.Th>
            <Table.Th onClick={() => handleSort('oid')}>
              {tableHeaderWithIcon('Oid')}
            </Table.Th>
            <Table.Th onClick={() => handleSort('name')}>
              {tableHeaderWithIcon('Name')}
            </Table.Th>
            <Table.Th onClick={() => handleSort('severity')}>
              {tableHeaderWithIcon('Severity')}
            </Table.Th>
            <Table.Th onClick={() => handleSort('assetId')}>
              {tableHeaderWithIcon('AssetId')}
            </Table.Th>
            <Table.Th onClick={() => handleSort('solutionType')}>
              {tableHeaderWithIcon('Solution')}
            </Table.Th>
            <Table.Th>Details</Table.Th>
          </Table.Tr>
        </Table.Thead>
        <Table.Tbody>
          {vulnerabilityList.map((vulnerability) => (
            <Table.Tr key={vulnerability.oid}>
              <Table.Td>
                <Checkbox
                  checked={checked.includes(vulnerability.oid)}
                  onChange={() => toggleCheckBoxHandler(vulnerability.oid)}
                />
              </Table.Td>
              <Table.Td>
                <Box w={100}>
                  <Text truncate="end">{vulnerability.oid}</Text>
                </Box>
              </Table.Td>
              <Table.Td>
                <Box w={100}>
                  <Text truncate="end">{vulnerability.name}</Text>
                </Box>
              </Table.Td>
              <Table.Td>{vulnerability.severity}</Table.Td>
              <Table.Td>{vulnerability.assetId}</Table.Td>
              <Table.Td>{vulnerability.solutionType}</Table.Td>
              <Table.Td onClick={() => onClickHandler(vulnerability)}>
                <Link href="">Show Details</Link>
              </Table.Td>
            </Table.Tr>
          ))}
        </Table.Tbody>
      </Table>
    </div>
  );
};

export default VulnerabilityList;
